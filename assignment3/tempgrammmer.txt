
START
: external_declaration
| START external_declaration
;

external_declaration
: type_specifiers declarator compound_statement
| type_specifiers declarator ';'
;

function_definition
: type_specifiers declarator compound_statement
;

declarator
: IDENTIFIER
| ( declarator )
| declarator ( parameter_list )
| declarator ( identifier_list )
| declarator ( )
;

parameter_list
: parameter_declaration
| parameter_list , parameter_declaration
;

parameter_declaration
: type_specifiers declarator
| type_specifiers
;

identifier_list
: IDENTIFIER
| identifier_list , IDENTIFIER
;

compound_statement
: { }
| { statement_list }
;


declaration
: type_specifiers declarator ';'
;

statement_list
: statement
| statement_list statement
;

statement
: declaration
| compound_statement
| expression_statement
| selection_statement
| iteration_statement
| jump_statement
| IDENTIFIER ( )
| IDENTIFIER ( identifier_list )
;

selection_statement
: IF ( logical_or_expression ) statement
| IF ( logical_or_expression ) statement ELSE statement
;

iteration_statement
: WHILE ( logical_or_expression ) statement
| DO statement WHILE ( logical_or_expression ) ';'
| FOR ( assignment_expression ';' logical_or_expression ';' assignment_expression ) statement
;

jump_statement
: CONTINUE ';'
| BREAK ';'
| RETURN ';'
| RETURN logical_or_expression ';'
;

primary_expression
: IDENTIFIER
| CONSTANT
| STRING_LITERAL
| ( assignment_expression )
;


multiplicative_expression
: primary_expression
| multiplicative_expression * primary_expression
| multiplicative_expression / primary__expression
| multiplicative_expression % primary_expression
;

additive_expression
: multiplicative_expression
| additive_expression + multiplicative_expression
| additive_expression - multiplicative_expression
;

shift_expression
: additive_expression
| shift_expression << additive_expression
| shift_expression >> additive_expression
;

relational_expression
: shift_expression
| relational_expression < shift_expression
| relational_expression > shift_expression
| relational_expression <= shift_expression
| relational_expression >= shift_expression
;

equality_expression
: relational_expression
| equality_expression == relational_expression
| equality_expression != relational_expression
;

and_expression
: equality_expression
| and_expression & equality_expression
;

exclusive_or_expression
: and_expression
| exclusive_or_expression ^ and_expression
;

inclusive_or_expression
: exclusive_or_expression
| inclusive_or_expression '|' exclusive_or_expression
;

logical_and_expression
: inclusive_or_expression
| logical_and_expression && inclusive_or_expression
;

logical_or_expression
: logical_and_expression
| logical_or_expression || logical_and_expression
;

conditional_expression
: logical_or_expression
| logical_or_expression ? expression : conditional_expression
;

assignment_expression
: IDENTIFIER assignment_operator logical_or_expression
;


expression_statement
: ';'
| assignment_expression ';'
;



assignment_operator
: =
| *=
| /=
| %=
| +=
| -=
| <<=
| >>=
| &=
| ^=
| |=
;

type_specifiers
: VOID
| CHAR
| SHORT
| INT
| LONG
| FLOAT
| DOUBLE
| SIGNED
| UNSIGNED
;


assignment_operator
: =
| *=
| /=
| %=
| +=
| -=
| <<=
| >>=
| &=
| ^=
| '|'=
;

type_specifiers
: VOID
| CHAR
| SHORT
| INT
| LONG
| FLOAT
| DOUBLE
| SIGNED
| UNSIGNED
;
